# Server
server.port=8080

# Database
spring.datasource.url=jdbc:postgresql://localhost:5432/registration_db
spring.datasource.username=user
spring.datasource.password=password # Use env variables or secrets management in prod
spring.jpa.hibernate.ddl-auto=update # Or validate/none for production
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true # For debugging

# Redis
spring.redis.host=localhost
spring.redis.port=6379
# spring.redis.password= # If you set one

# Kafka
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.group-id=registration-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=* # Be more specific in production
spring.kafka.consumer.properties.spring.json.use.type.headers=false # If sending specific DTOs

# Custom Properties
app.kafka.topic.registration=registration
app.redis.client-status-key-prefix=client_status:

# JWT (Define your secret and expiration)
app.jwt.secret=YourSuperSecretKeyWhichIsLongAndSecureChangeMe # Use env variables!
app.jwt.expiration-ms=86400000 # 24 hours

# Rate Limiting (Example config, might vary based on library)
app.ratelimit.capacity=10 # Requests
app.ratelimit.refill-rate=10 # Tokens
app.ratelimit.refill-period-seconds=60 # Per minute